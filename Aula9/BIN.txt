tmp(0) := "0100" & '0' & x"00";    	-- LDI $0 	#Carrega o acumulador com o valor 0
tmp(1) := "0101" & '1' & x"FF";    	-- STA @511 	#RESET no KEY0
tmp(2) := "0101" & '1' & x"FE";    	-- STA @510 	#RESET no KEY1
tmp(3) := "0101" & '1' & x"00";    	-- STA @256 	#Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
tmp(4) := "0101" & '1' & x"01";    	-- STA @257 	#Armazena o valor do bit0 do acumulador no LDR8
tmp(5) := "0101" & '1' & x"02";    	-- STA @258 	#Armazena o valor do bit0 do acumulador no LDR9
tmp(6) := "0101" & '1' & x"20";    	-- STA @288 	#Armazena o valor do acumulador em HEX0
tmp(7) := "0101" & '1' & x"21";    	-- STA @289 	#Armazena o valor do acumulador em HEX1
tmp(8) := "0101" & '1' & x"22";    	-- STA @290 	#Armazena o valor do acumulador em HEX2
tmp(9) := "0101" & '1' & x"23";    	-- STA @291 	#Armazena o valor do acumulador em HEX3
tmp(10) := "0101" & '1' & x"24";   	-- STA @292 	#Armazena o valor do acumulador em HEX4
tmp(11) := "0101" & '1' & x"25";   	-- STA @293 	#Armazena o valor do acumulador em HEX5
tmp(12) := "0101" & '0' & x"00";   	-- STA @0 	#Armazena o valor do acumulador em MEM[0]
tmp(13) := "0101" & '0' & x"01";   	-- STA @1 	#Armazena o valor do acumulador em MEM[1]
tmp(14) := "0101" & '0' & x"02";   	-- STA @2 	#Armazena o valor do acumulador em MEM[2]
tmp(15) := "0101" & '0' & x"03";   	-- STA @3 	#Armazena o valor do acumulador em MEM[3]
tmp(16) := "0101" & '0' & x"04";   	-- STA @4 	#Armazena o valor do acumulador em MEM[4]
tmp(17) := "0101" & '0' & x"05";   	-- STA @5 	#Armazena o valor do acumulador em MEM[5]
tmp(18) := "0100" & '0' & x"09";   	-- LDI $9 	#Carrega no acumulador o valor 9
tmp(19) := "0101" & '0' & x"0A";   	-- STA @10 	#Armazena o valor do acumulador em MEM[10] (LIMITE UNIDADE)
tmp(20) := "0101" & '0' & x"0B";   	-- STA @11 	#Armazena o valor do acumulador em MEM[11] (LIMITE DEZENA)
tmp(21) := "0101" & '0' & x"0C";   	-- STA @12 	#Armazena o valor do acumulador em MEM[12] (LIMITE CENTENA)
tmp(22) := "0101" & '0' & x"0D";   	-- STA @13 	#Armazena o valor do acumulador em MEM[13] (LIMITE MILHAR)
tmp(23) := "0101" & '0' & x"0E";   	-- STA @14 	#Armazena o valor do acumulador em MEM[14] (LIMITE DEZENA DE MILHAR)
tmp(24) := "0101" & '0' & x"0F";   	-- STA @15 	#Armazena o valor do acumulador em MEM[15] (LIMITE CENTENA DE MILHAR)
tmp(25) := "0100" & '0' & x"00";   	-- LDI $0 	#Carrega o valor 0 para fazer comparações
tmp(26) := "0101" & '0' & x"06";   	-- STA @6 	#Armazena o valor do acumulador em MEM[6]
tmp(27) := "0100" & '0' & x"01";   	-- LDI $1 	#Carrega o valor 1 para fazer incrementos
tmp(28) := "0101" & '0' & x"07";   	-- STA @7 	#Armazena o valor do acumulador em MEM[7]
tmp(29) := "0100" & '0' & x"0A";   	-- LDI $10 	#Carrega o valor 10 para fazer comparações de limite
tmp(30) := "0101" & '0' & x"08";   	-- STA @8 	#Armazena o valor do acumulador em MEM[8]
tmp(31) := "0100" & '0' & x"00";   	-- LDI $0 	#Carrega o valor 0 para FLAG INIBIR CONTAGEM
tmp(32) := "0000" & '0' & x"00";   	-- NOP 	#LOOP PRINCIPAL
tmp(33) := "0001" & '0' & x"00";   	-- LDA @0 	# Carrega UNIDADES
tmp(34) := "0101" & '1' & x"20";   	-- STA @288 	# Mostra unidade no HEX0
tmp(35) := "0001" & '0' & x"01";   	-- LDA @1 	# Carrega DEZENA
tmp(36) := "0101" & '1' & x"21";   	-- STA @289 	# Mostra unidade no HEX1
tmp(37) := "0001" & '0' & x"02";   	-- LDA @2 	# Carrega CENTENA
tmp(38) := "0101" & '1' & x"22";   	-- STA @290 	# Mostra unidade no HEX2
tmp(39) := "0001" & '0' & x"03";   	-- LDA @3 	# Carrega MILHAR
tmp(40) := "0101" & '1' & x"23";   	-- STA @291 	# Mostra unidade no HEX3
tmp(41) := "0001" & '0' & x"04";   	-- LDA @4 	# Carrega DEZENA DE MILHAR
tmp(42) := "0101" & '1' & x"24";   	-- STA @292 	# Mostra unidade no HEX4
tmp(43) := "0001" & '0' & x"05";   	-- LDA @5 	# Carrega CENTENA DE MILHAR
tmp(44) := "0101" & '1' & x"25";   	-- STA @293 	# Mostra unidade no HEX5
tmp(45) := "0001" & '1' & x"60";   	-- LDA @352 	#Carrega o acumulador com a leitura do botão KEY0
tmp(46) := "1000" & '0' & x"07";   	-- CEQ @7 	#Compara o valor de KEY0 com o valor 1
tmp(47) := "0111" & '0' & x"34";   	-- JEQ @GOTO_DEF_LIMITE 	#Jump para a linha onde realizara o JSR da definição de limite
tmp(48) := "0001" & '1' & x"61";   	-- LDA @353 	#Carrega o acumulador com a leitura do botão KEY1
tmp(49) := "1000" & '0' & x"07";   	-- CEQ @7 	#Compara o valor de KEY1 com o valor 1
tmp(50) := "0111" & '0' & x"37";   	-- JEQ @GOTO_INCREMENTA 	#Jump para a linha onde realizara o JSR de incremento
tmp(51) := "0110" & '0' & x"20";   	-- JMP @MAIN_LOOP 	#Volta para o MAIN_LOOP e espera o usuário realizar um evento
tmp(52) := "0000" & '0' & x"00";   	-- NOP 	#GOTO_DEF_LIMITE
tmp(53) := "1001" & '0' & x"3A";   	-- JSR @DEF_LIMITE
tmp(54) := "0110" & '0' & x"20";   	-- JMP @MAIN_LOOP
tmp(55) := "0000" & '0' & x"00";   	-- NOP 	#GOTO_INCREMENTA
tmp(56) := "1001" & '0' & x"7F";   	-- JSR @INCREMENTA
tmp(57) := "0110" & '0' & x"20";   	-- JMP @MAIN_LOOP
tmp(58) := "0000" & '0' & x"00";   	-- NOP 	# DEF_LIMITE
tmp(59) := "0101" & '1' & x"FF";   	-- STA @511 	#RESET no KEY0
tmp(60) := "0100" & '0' & x"01";   	-- LDI $1 	#Carrega o valor 1
tmp(61) := "0101" & '1' & x"00";   	-- STA @256 	#Armazena o valor 1 no LEDR0
tmp(62) := "0000" & '0' & x"00";   	-- NOP 	#BUSY_WAITING_1
tmp(63) := "0001" & '1' & x"60";   	-- LDA @352 	#Ler o valor do KEY0
tmp(64) := "1000" & '0' & x"09";   	-- CEQ @9 	#Compara o acumulador com o valor 0
tmp(65) := "0111" & '0' & x"3E";   	-- JEQ @BUSY_WAITING_1 	#Volta na leitura do KEY0
tmp(66) := "0100" & '0' & x"00";   	-- LDI $0 	#Carrega o acumulador com o valor 0
tmp(67) := "0101" & '1' & x"FF";   	-- STA @511 	#RESET no KEY0
tmp(68) := "0001" & '1' & x"40";   	-- LDA @320 	#Leitura do SW0 ~ SW7 
tmp(69) := "0101" & '0' & x"0A";   	-- STA @10 	#Armazena o valor do acumulador em MEM[10] (LIMITE UNIDADE)
tmp(70) := "0101" & '1' & x"20";   	-- STA @288 	#Escreve no HEX0
tmp(71) := "0100" & '0' & x"02";   	-- LDI $2 	#Carrega o valor 2
tmp(72) := "0101" & '1' & x"00";   	-- STA @256 	#Armazena o valor 1 no LEDR1
tmp(73) := "0000" & '0' & x"00";   	-- NOP 	#BUSY_WAITING_2
tmp(74) := "0001" & '1' & x"60";   	-- LDA @352 	#Ler o valor do KEY0
tmp(75) := "1000" & '0' & x"09";   	-- CEQ @9 	#Compara o acumulador com o valor 0
tmp(76) := "0111" & '0' & x"49";   	-- JEQ @BUSY_WAITING_2 	#Volta na leitura do KEY0
tmp(77) := "0100" & '0' & x"00";   	-- LDI $0 	#Carrega o acumulador com o valor 0
tmp(78) := "0101" & '1' & x"FF";   	-- STA @511 	#RESET no KEY0
tmp(79) := "0001" & '1' & x"40";   	-- LDA @320 	#Leitura do SW0 ~ SW7 
tmp(80) := "0101" & '0' & x"0B";   	-- STA @11 	#Armazena o valor do acumulador em MEM[11] (LIMITE DEZENA)
tmp(81) := "0101" & '1' & x"21";   	-- STA @289 	#Escreve no HEX1
tmp(82) := "0100" & '0' & x"04";   	-- LDI $4 	#Carrega o valor 4
tmp(83) := "0101" & '1' & x"00";   	-- STA @256 	#Armazena o valor 1 no LEDR2
tmp(84) := "0000" & '0' & x"00";   	-- NOP 	#BUSY_WAITING_3
tmp(85) := "0001" & '1' & x"60";   	-- LDA @352 	#Ler o valor do KEY0
tmp(86) := "1000" & '0' & x"09";   	-- CEQ @9 	#Compara o acumulador com o valor 0
tmp(87) := "0111" & '0' & x"54";   	-- JEQ @BUSY_WAITING_3 	#Volta na leitura do KEY0
tmp(88) := "0100" & '0' & x"00";   	-- LDI $0 	#Carrega o acumulador com o valor 0
tmp(89) := "0101" & '1' & x"FF";   	-- STA @511 	#RESET no KEY0
tmp(90) := "0001" & '1' & x"40";   	-- LDA @320 	#Leitura do SW0 ~ SW7 
tmp(91) := "0101" & '0' & x"0C";   	-- STA @12 	#Armazena o valor do acumulador em MEM[12] (LIMITE CENTENA)
tmp(92) := "0101" & '1' & x"22";   	-- STA @290 	#Escreve no HEX2
tmp(93) := "0100" & '0' & x"08";   	-- LDI $8 	#Carrega o valor 8
tmp(94) := "0101" & '1' & x"00";   	-- STA @256 	#Armazena o valor 1 no LEDR3
tmp(95) := "0000" & '0' & x"00";   	-- NOP 	#BUSY_WAITING_4
tmp(96) := "0001" & '1' & x"60";   	-- LDA @352 	#Ler o valor do KEY0
tmp(97) := "1000" & '0' & x"09";   	-- CEQ @9 	#Compara o acumulador com o valor 0
tmp(98) := "0111" & '0' & x"5F";   	-- JEQ @BUSY_WAITING_4 	#Volta na leitura do KEY0
tmp(99) := "0100" & '0' & x"00";   	-- LDI $0 	#Carrega o acumulador com o valor 0
tmp(100) := "0101" & '1' & x"FF";  	-- STA @511 	#RESET no KEY0
tmp(101) := "0001" & '1' & x"40";  	-- LDA @320 	#Leitura do SW0 ~ SW7 
tmp(102) := "0101" & '0' & x"0D";  	-- STA @13 	#Armazena o valor do acumulador em MEM[13] (LIMITE MILHAR)
tmp(103) := "0101" & '1' & x"23";  	-- STA @291 	#Escreve no HEX3
tmp(104) := "0100" & '0' & x"10";  	-- LDI $16 	#Carrega o valor 16
tmp(105) := "0101" & '1' & x"00";  	-- STA @256 	#Armazena o valor 1 no LEDR4
tmp(106) := "0000" & '0' & x"00";  	-- NOP 	#BUSY_WAITING_5
tmp(107) := "0001" & '1' & x"60";  	-- LDA @352 	#Ler o valor do KEY0
tmp(108) := "1000" & '0' & x"09";  	-- CEQ @9 	#Compara o acumulador com o valor 0
tmp(109) := "0111" & '0' & x"6A";  	-- JEQ @BUSY_WAITING_5 	#Volta na leitura do KEY0
tmp(110) := "0100" & '0' & x"00";  	-- LDI $0 	#Carrega o acumulador com o valor 0
tmp(111) := "0101" & '1' & x"FF";  	-- STA @511 	#RESET no KEY0
tmp(112) := "0001" & '1' & x"40";  	-- LDA @320 	#Leitura do SW0 ~ SW7 
tmp(113) := "0101" & '0' & x"0E";  	-- STA @14 	#Armazena o valor do acumulador em MEM[14] (LIMITE DEZENA DE MILHAR)
tmp(114) := "0101" & '1' & x"24";  	-- STA @292 	#Escreve no HEX4
tmp(115) := "0100" & '0' & x"20";  	-- LDI $32 	#Carrega o valor 32
tmp(116) := "0101" & '1' & x"00";  	-- STA @256 	#Armazena o valor 1 no LEDR5
tmp(117) := "0000" & '0' & x"00";  	-- NOP 	#BUSY_WAITING_6
tmp(118) := "0001" & '1' & x"60";  	-- LDA @352 	#Ler o valor do KEY0
tmp(119) := "1000" & '0' & x"09";  	-- CEQ @9 	#Compara o acumulador com o valor 0
tmp(120) := "0111" & '0' & x"75";  	-- JEQ @BUSY_WAITING_6 	#Volta na leitura do KEY0
tmp(121) := "0100" & '0' & x"00";  	-- LDI $0 	#Carrega o acumulador com o valor 0
tmp(122) := "0101" & '1' & x"FF";  	-- STA @511 	#RESET no KEY0
tmp(123) := "0001" & '1' & x"40";  	-- LDA @320 	#Leitura do SW0 ~ SW7 
tmp(124) := "0101" & '0' & x"0F";  	-- STA @15 	#Armazena o valor do acumulador em MEM[15] (LIMITE CENTENA DE MILHAR)
tmp(125) := "0101" & '1' & x"25";  	-- STA @293 	#Escreve no HEX5
tmp(126) := "1010" & '0' & x"00";  	-- RET
tmp(127) := "0000" & '0' & x"00";  	-- NOP 	# INCREMENTA
tmp(128) := "0001" & '0' & x"09";  	-- LDA @9 	#Carrega valor 0 no acumulador
tmp(129) := "0101" & '1' & x"02";  	-- STA @258 	#Apaga o LED 9 
tmp(130) := "0101" & '1' & x"00";  	-- STA @256 	#Apaga os LED0 ~ LED7
tmp(131) := "0001" & '0' & x"00";  	-- LDA @0 	# Carrega conteudo das UNIDADES
tmp(132) := "0010" & '0' & x"07";  	-- SOMA @7 	# Soma 1 ao valor das UNIDADES
tmp(133) := "1000" & '0' & x"08";  	-- CEQ @8 	# Comparar com o valor 10
tmp(134) := "0111" & '0' & x"89";  	-- JEQ @INCREMENTA_DEZENA 	# Pula para incrementar dezena quando há overflow na unidade
tmp(135) := "0101" & '0' & x"00";  	-- STA @0 	# Guarda o valor novo
tmp(136) := "1010" & '0' & x"00";  	-- RET 	# Retorna para a MAIN LOOP
tmp(137) := "0001" & '0' & x"09";  	-- LDA @9 	# Carrega zero
tmp(138) := "0101" & '0' & x"00";  	-- STA @0 	# Define o valor das unidades com zero
tmp(139) := "0001" & '0' & x"01";  	-- LDA @1 	# Carrega valor das dezenas
tmp(140) := "0010" & '0' & x"07";  	-- SOMA @7 	# Soma 1 ao valor das DEZENAS
tmp(141) := "0101" & '0' & x"01";  	-- STA @1 	# Salva o novo valor das DEZENAS
tmp(142) := "1010" & '0' & x"00";  	-- RET 	# Retorna para MAIN LOOP
tmp(143) := "0110" & '0' & x"7F";  	-- JMP @INCREMENTA
tmp(144) := "1010" & '0' & x"00";  	-- RET
