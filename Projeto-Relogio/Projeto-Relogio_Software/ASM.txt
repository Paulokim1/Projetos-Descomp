########## SETUP INICIAL #########
BEGIN:
NOP #BEGIN
LDI R1 $1 #Carrega o R1 com o valor 1
LDI R0 $0 #Carrega o R0 com o valor 0
STA R0 @511 #RESET no KEY0
STA R0 @510 #RESET no KEY1
STA R0 @256 #Armazena o valor do R0 no LDR0 ~ LEDR7
STA R0 @257 #Armazena o valor do R0 no LDR8
STA R0 @258 #Armazena o valor do R0 no LDR9
STA R0 @288 #Armazena o valor do R0 em HEX0
STA R0 @289 #Armazena o valor do R0 em HEX1 
STA R0 @290 #Armazena o valor do R0 em HEX2
STA R0 @291 #Armazena o valor do R0 em HEX3
STA R0 @292 #Armazena o valor do R0 em HEX4
STA R0 @293 #Armazena o valor do R0 em HEX5
STA R0 @0 #Armazena o valor do R0 em MEM[0] UNIDADE DE SEGUNDO
STA R0 @1 #Armazena o valor do R0 em MEM[1] DEZENA DE SEGUNDO
STA R0 @2 #Armazena o valor do R0 em MEM[2] UNIDADE DE MINUTO
STA R0 @3 #Armazena o valor do R0 em MEM[3] DEZENA DE MINUTO
STA R0 @4 #Armazena o valor do R0 em MEM[4] UNIDADE DE HORA
STA R0 @5 #Armazena o valor do R0 em MEM[5] DEZENA DE HORA

LDI R2 $10 #Carrega no R2 o valor 10
STA R2 @10 #Armazena o valor do R2 em MEM[10] (LIMITE UNIDADE DE SEGUNDO)
STA R2 @12 #Armazena o valor do R2 em MEM[12] (LIMITE UNIDADE DE MINUTO)
STA R2 @14 #Armazena o valor do R2 em MEM[14] (LIMITE UNIDADE DE HORA)

LDI R2 $6 #Carrega no R2 o valor 6
STA R2 @11 #Armazena o valor do R2 em MEM[11] (LIMITE DEZENA DE SEGUNDO)
STA R2 @13 #Armazena o valor do R2 em MEM[13] (LIMITE DEZENA DE MINUTO)

LDI R2 $3 #Carrega no R2 o valor 3
STA R2 @15 #Armazena o valor do R2 em MEM[15] (LIMITE DEZENA DE HORA)

STA R0 @16 #Armazena o valor do R0 em MEM[16] (VALOR TEMP UNIDADE DE SEGUNDO)
STA R0 @17 #Armazena o valor do R0 em MEM[17] (VALOR TEMP DEZENA DE SEGUNDO)
STA R0 @18 #Armazena o valor do R0 em MEM[18] (VALOR TEMP UNIDADE DE MINUTO)
STA R0 @19 #Armazena o valor do R0 em MEM[19] (VALOR TEMP DEZENA DE MINUTO)
STA R0 @20 #Armazena o valor do R0 em MEM[20] (VALOR TEMP UNIDADE DE HORA)
STA R0 @21 #Armazena o valor do R0 em MEM[21] (VALOR TEMP DEZENA DE HORA)

LDI R2 $128 #Carrega o valor 10 para fazer comparações de limite máximo
STA R2 @9 #Armazena o valor do R2 em MEM[9]




# <<<<<<<<<<<<<<<< LOOP-PRINCIPAL >>>>>>>>>>>>>>>> #
MAIN_LOOP:
NOP #LOOP PRINCIPAL

STA R0 @256 #Apaga todos os LEDs

#UPDATE DA TELA
JSR @ATUALIZA_TELA #Responsável em atualizar a tela

#CHECAGEM DO 00
JSR @CHECAGEM_DEZENA_HORA_00

#CONTADOR DO RELOGIO
CEQ R1 @352 #Compara o 1 com o KEY0
JEQ @GOTO_INCREMENTA #Se ela for pressionado

#CHECA EVENTO KEY1 (DEFINIÇÃO DO HORARIO)
CEQ R1 @353 #Compara o valor de KEY1 com o valor 1
JEQ @GOTO_DEF_HORARIO #Jump para a linha onde realizara o JSR de incremento

JMP @MAIN_LOOP #Volta para o MAIN_LOOP e espera o usuário realizar um evento

GOTO_INCREMENTA:
NOP #GOTO_INCREMENTA
JSR @INCREMENTA
JMP @MAIN_LOOP

GOTO_DEF_HORARIO:
NOP #GOTO_DEF_HORARIO
JSR @DEF_HORARIO 
JMP @MAIN_LOOP 




# <<<<<<<<<<<<<<<< SUB-ROTINAS >>>>>>>>>>>>>>>> #

# <<< SUB-ROTINA DE DEFINIÇÃO DO HORARIO >>> #
DEF_HORARIO:
NOP #DEF_HORARIO

### UNIDADE DE SEGUNDO###
STA R0 @510 #RESET no KEY1
STA R1 @256 #Armazena o valor 1 no LEDR0
JMP @BUSY_WAITING_1

COLOCA_9_UNIDADE_SEGUNDO:
NOP #COLOCA_9_UNIDADE_SEGUNDO
LDI R2 $9 #Carrega 9 no R2
STA R2 @288 #Escreve no HEX0
STA R2 @16 #Escreve no VALOR TEMP UNIDADE SEGUNDO
JMP @SALVA_UNIDADE_SEGUNDO

BUSY_WAITING_1:
NOP #BUSY_WAITING_1
LDA R2 @320 #Leitura do SW0 ~ SW7 
STA R2 @16 #Escreve no VALOR TEMP UNIDADE SEGUNDO
STA R2 @288 #Escreve no HEX0
CEQ R0 @353 #Compara do KEY1 com o valor 0
JEQ @BUSY_WAITING_1 #Volta na leitura do KEY1

LDI R2 $9 #Carrega R2 com o limite máximo
SUB R2 @16 #Subtrai o VALOR ATUAL UNIDADE do limite máximo da unidade
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @COLOCA_9_UNIDADE_SEGUNDO #Vai para a escrita de 9

SALVA_UNIDADE_SEGUNDO:
NOP #SALVA_UNIDADE_SEGUNDO
LDA R2 @16 #Leitura do VALOR TEMP UNIDADE
STA R2 @0 #Armazena o valor do R2 em MEM[0]
STA R0 @510



### DEZENA DE SEGUNDO ###
LDI R2 $2 # Carrega 2 no R2
STA R2 @256 #Armazena o valor 1 no LEDR1
STA R0 @510 #RESET no KEY1
JMP @BUSY_WAITING_2

COLOCA_5_DEZENA_SEGUNDO:
NOP #COLOCA_5_DEZENA_SEGUNDO
LDI R2 $5 #Carrega 5 no REG2
STA R2 @289 #Escreve no HEX1
STA R2 @17 #Escreve no VALOR TEMP DEZENA SEGUNDO
JMP @SALVA_DEZENA_SEGUNDO

BUSY_WAITING_2:
NOP #BUSY_WAITING_2
LDA R2 @320 #Leitura do SW0 ~ SW7 
STA R2 @17 #Escreve no VALOR TEMP DEZENA SEGUNDO
STA R2 @289 #Escreve no HEX1
CEQ R0 @353 #Compara do KEY1 com o valor 0
JEQ @BUSY_WAITING_2 #Volta na leitura do KEY1

LDI R2 $5 #Carrega R2 com o limite máximo
SUB R2 @17 #Subtrai o VALOR ATUAL DO LIMITE DEZENA DE SEGUNDO do limite máximo da unidade
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @COLOCA_5_DEZENA_SEGUNDO #Vai para a escrita de 5

SALVA_DEZENA_SEGUNDO:
NOP #SALVA_DEZENA_SEGUNDO
LDA R2 @17 #Leitura do VALOR TEMP DEZENA
STA R2 @1 #Armazena o valor do R2 em MEM[1] DEZENA DE SEGUNDO
STA R0 @510



### UNIDADE DE MINUTO ###
LDI R2 $4 # Carrega 4 no R2
STA R2 @256 #Armazena o valor 1 no LEDR2
STA R0 @510 #RESET no KEY1
JMP @BUSY_WAITING_3

COLOCA_9_UNIDADE_MINUTO:
NOP #COLOCA_9_UNIDADE_MINUTO
LDI R2 $9 #Carrega 9 no REG2
STA R2 @290 #Escreve no HEX2
STA R2 @18 #Escreve no VALOR TEMP UNIDADE MINUTO
JMP @SALVA_UNIDADE_MINUTO

BUSY_WAITING_3:
NOP #BUSY_WAITING_3
LDA R2 @320 #Leitura do SW0 ~ SW7 
STA R2 @18 #Escreve no VALOR TEMP UNIDADE MINUTO
STA R2 @290 #Escreve no HEX2
CEQ R0 @353 #Compara do KEY1 com o valor 0
JEQ @BUSY_WAITING_3 #Volta na leitura do KEY1

LDI R2 $9 #Carrega R2 com o limite máximo
SUB R2 @18 #Subtrai o VALOR ATUAL DO LIMITE UNIDADE DE MINUTO do limite máximo da unidade
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @COLOCA_9_UNIDADE_MINUTO #Vai para a escrita de 9

SALVA_UNIDADE_MINUTO:
NOP #SALVA_UNIDADE_MINUTO
LDA R2 @18 #Leitura do VALOR TEMP DEZENA
STA R2 @2 #Armazena o valor do R2 em MEM[2] UNIDADE DE MINUTO
STA R0 @510



### DEZENA DE MINUTO ###
LDI R2 $8 # Carrega 8 no R2
STA R2 @256 #Armazena o valor 1 no LEDR3
STA R0 @510 #RESET no KEY1
JMP @BUSY_WAITING_4

COLOCA_5_DEZENA_MINUTO:
NOP #COLOCA_5_DEZENA_MINUTO
LDI R2 $5 #Carrega 5 no REG2
STA R2 @291 #Escreve no HEX3
STA R2 @19 #Escreve no VALOR TEMP DEZENA MINUTO
JMP @SALVA_DEZENA_MINUTO

BUSY_WAITING_4:
NOP #BUSY_WAITING_4
LDA R2 @320 #Leitura do SW0 ~ SW7 
STA R2 @19 #Escreve no VALOR TEMP DEZENA MINUTO
STA R2 @291 #Escreve no HEX3
CEQ R0 @353 #Compara do KEY1 com o valor 0
JEQ @BUSY_WAITING_4 #Volta na leitura do KEY1

LDI R2 $5 #Carrega R2 com o limite máximo
SUB R2 @19 #Subtrai o VALOR ATUAL DO LIMITE DEZENA DE MINUTO do limite máximo da unidade
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @COLOCA_5_DEZENA_MINUTO #Vai para a escrita de 5

SALVA_DEZENA_MINUTO:
NOP #SALVA_DEZENA_MINUTO
LDA R2 @19 #Leitura do VALOR TEMP DEZENA MINUTO
STA R2 @3 #Armazena o valor do R2 em MEM[3] DEZENA DE MINUTO
STA R0 @510



### UNIDADE DE HORA ###
LDI R2 $16 # Carrega 16 no R2
STA R2 @256 #Armazena o valor 1 no LEDR4
STA R0 @510 #RESET no KEY1
JMP @BUSY_WAITING_5

COLOCA_9_UNIDADE_HORA:
NOP #COLOCA_9_UNIDADE_HORA
LDI R2 $9 #Carrega 9 no REG2
STA R2 @292 #Escreve no HEX4
STA R2 @20 #Escreve no VALOR TEMP UNIDADE HORA
JMP @SALVA_UNIDADE_HORA

BUSY_WAITING_5:
NOP #BUSY_WAITING_5
LDA R2 @320 #Leitura do SW0 ~ SW7 
STA R2 @20 #Escreve no VALOR TEMP UNIDADE MINUTO
STA R2 @292 #Escreve no HEX4
CEQ R0 @353 #Compara do KEY1 com o valor 0
JEQ @BUSY_WAITING_5 #Volta na leitura do KEY1

LDI R2 $9 #Carrega R2 com o limite máximo
SUB R2 @20 #Subtrai o VALOR ATUAL DO LIMITE UNIDADE DE HORA do limite máximo da unidade
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @COLOCA_9_UNIDADE_HORA #Vai para a escrita de 9

SALVA_UNIDADE_HORA:
NOP #SALVA_UNIDADE_HORA
LDA R2 @20 #Leitura do VALOR TEMP DEZENA
STA R2 @4 #Armazena o valor do R2 em MEM[4] UNIDADE DE HORA
STA R0 @510



### DEZENA DE HORA ###
LDI R2 $32 # Carrega 32 no R2
STA R2 @256 #Armazena o valor 1 no LEDR5
STA R0 @510 #RESET no KEY1
JMP @BUSY_WAITING_6

VERIFICA_DEZENA_HORA:
NOP #VERIFICA_DEZENA_HORA
LDI R2 $1 #Carrega R2 com 1 
SUB R2 @21 #Subtrai o valor da DEZENA DE HORA de 1
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @COLOCA_1_DEZENA_HORA #Vai para a escrita de 1
JMP @SALVA_DEZENA_HORA

COLOCA_1_DEZENA_HORA:
NOP #COLOCA_1_DEZENA_HORA
LDI R2 $1 #Carrega 2 no REG2
STA R2 @293 #Escreve no HEX5
STA R2 @21 #Escreve no VALOR TEMP DEZENA HORA
JMP @SALVA_DEZENA_HORA

COLOCA_2_DEZENA_HORA:
NOP #COLOCA_2_DEZENA_HORA
LDI R2 $2 #Carrega 2 no REG2
STA R2 @293 #Escreve no HEX5
STA R2 @21 #Escreve no VALOR TEMP DEZENA HORA
JMP @SALVA_DEZENA_HORA

BUSY_WAITING_6:
NOP #BUSY_WAITING_6
LDA R2 @320 #Leitura do SW0 ~ SW7 
STA R2 @21 #Escreve no VALOR TEMP DEZENA DE HORA
STA R2 @293 #Escreve no HEX5
CEQ R0 @353 #Compara o KEY1 com o valor 0
JEQ @BUSY_WAITING_6 #Volta na leitura do KEY1

LDI R2 $3 #Carrega R2 com 3 
SUB R2 @4 #Subtrai o valor da UNIDADE DE HORA de 3
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @VERIFICA_DEZENA_HORA #Vai para a escrita de 1

LDI R2 $2 #Carrega R2 com o limite máximo
SUB R2 @21 #Subtrai o VALOR ATUAL DO LIMITE UNIDADE DE HORA do limite máximo da unidade
ANDI R2 $128 #AND com 10000000 para ver se valor é negativo
CEQ R2 @9 #Verifica se o valor do AND deu 128
JEQ @COLOCA_2_DEZENA_HORA #Vai para a escrita de 2

SALVA_DEZENA_HORA:
NOP #SALVA_DEZENA_HORA
LDA R2 @21 #Leitura do VALOR TEMP DEZENA
STA R2 @5 #Armazena o valor do R2 em MEM[5] DEZENA DE HORA
STA R0 @510



### ACENDE TODOS OS LEDS SIMBOLIZANDO QUE O LIMITE FOI DEFINIDO ###
STA R0 @510 #RESET no KEY1
LDI R2 $255 #Carrega o valor 255 no Reg2
STA R2 @256 #Armazena o valor 255 nos LEDR0~LEDR7

### AGUARDA NOVO CLIQUE DO KEY1 PARA SAIR DA SUB-ROTINA ###
BUSY_WAITING_7:
NOP #BUSY_WAITING_7
CEQ R0 @353 #Compara o KEY1 com o valor 0
JEQ @BUSY_WAITING_7 #Volta na leitura do KEY1

STA R0 @510 #RESET no KEY1

RETORNO_MAIN_LOOP:
NOP #RETORNO_MAIN_LOOP
RET




# <<< SUB-ROTINA DE INCREMENTAR >>> #
INCREMENTA:
NOP # INCREMENTA
STA R0 @511 #RESET no KEY0

LDI R2 $1 #Carrega 1 no R2
SOMA R2 @0 # Soma 1 ao valor das UNIDADE DE SEGUNDO
CEQ R2 @10 # Comparar com o LIMITE UNIDADE DE SEGUNDO
JEQ @INCREMENTA_DEZENA # Pula para incrementar dezena quando há overflow na unidade
STA R2 @0 # Guarda o valor novo das UNIDADE DE SEGUNDOS
RET # Retorna para a MAIN LOOP

INCREMENTA_DEZENA:
NOP #INCREMENTA_DEZENA
STA R0 @0 #Define o valor UNIDADE DE SEGUNDOS com 0

LDI R2 $1 #Carrega 1 no R2
SOMA R2 @1 # Soma 1 ao valor das DEZENAS DE SEGUNDO
CEQ R2 @11 # Comparar com o LIMITE DEZENAS DE SEGUNDO
JEQ @INCREMENTA_CENTENA # Pula para incrementar centena quando há overflow na dezena
STA R2 @1 #Guarda o valor novo das DEZENA DE SEGUNDOS
RET # Retorna para MAIN LOOP

INCREMENTA_CENTENA:
NOP #INCREMENTA_CENTENA
STA R0 @1 #Define o valor DEZENA DE SEGUNDOS com 0

LDI R2 $1 #Carrega 1 no R2
SOMA R2 @2 # Soma 1 ao valor das UNIDADE DE MINUTO
CEQ R2 @12 # Comparar com LIMITE UNIDADE DE MINUTO
JEQ @INCREMENTA_MILHAR #Pula para incrementar milhar quando há overflow na centena
STA R2 @2 # Salva o novo valor das UNIDADE DE MINUTO
RET # Retorna para MAIN LOOP

INCREMENTA_MILHAR:
NOP #INCREMENTA_MILHAR
STA R0 @2 # Define o valor da UNIDADE DE MINUTO com zero

LDI R2 $1 #Carrega 1 no R2
SOMA R2 @3 # Soma 1 ao valor dos DEZENA DE MINUTO
CEQ R2 @13 # Comparar com LIMITE DEZENA DE MINUTO
JEQ @INCREMENTA_DEZENA_MILHAR # Pula para incrementar dezena de milhar quando há overflow no milhar
STA R2 @3 # Salva o novo valor dos DEZENA DE MINUTO
RET # Retorna para MAIN LOOP

INCREMENTA_DEZENA_MILHAR:
NOP #INCREMENTA_DEZENA_MILHAR
STA R0 @3 # Define o valor dos DEZENA DE MINUTO com zero

LDI R2 $1 # Carrega valor das UNIDADE DE HORA de milhar
SOMA R2 @4 # Soma 1 ao valor das UNIDADE DE HORA 
CEQ R2 @14 # Comparar com o LIMITE UNIDADE DE HORA
JEQ @INCREMENTA_CENTENA_MILHAR # Pula para incrementar centena de milhar quando há overflow na dezena de milhar
STA R2 @4 # Salva o novo valor das UNIDADE DE HORA
RET # Retorna para MAIN LOOP

INCREMENTA_CENTENA_MILHAR:
NOP #INCREMENTA_CENTENA_MILHAR
STA R0 @4 # Define o valor das UNIDADE DE HORA com zero

LDI R2 $1 # Carrega valor das DEZENA DE HORA de milhar
SOMA R2 @5 # Soma 1 ao valor das DEZENA DE HORA
STA R2 @5 # Salva o novo valor das DEZENA DE HORA
RET # Retorna para MAIN LOOP




# <<< SUB-ROTINA DE CHECAGEM_00 >>> #
CHECAGEM_DEZENA_HORA_00:
NOP #CHECAGEM_DEZENA_HORA_00
LDI R2 $2 #Carrega R2 com 2
CEQ R2 @5 #Compara com a dezena de hora
JEQ @CHECAGEM_UNIDADE_HORA_00
RET

CHECAGEM_UNIDADE_HORA_00:
NOP #CHECAGEM_UNIDADE_HORA_00
LDI R2 $4 #Carrega R2 com 4
CEQ R2 @4 #Compara com a unidade de hora
JEQ @ZERAR
RET

ZERAR:
NOP #ZERAR
STA R0 @0
STA R0 @1
STA R0 @2
STA R0 @3
STA R0 @4
STA R0 @5
RET




# <<< SUB-ROTINA DE ATUALIZAR TELA >>> #
ATUALIZA_TELA:
NOP #Atualiza tela
LDA R3 @0 # Carrega UNIDADES
STA R3 @288 # Mostra unidade no HEX0

LDA R3 @1 # Carrega DEZENA
STA R3 @289 # Mostra unidade no HEX1

LDA R3 @2 # Carrega CENTENA
STA R3 @290 # Mostra unidade no HEX2

LDA R3 @3 # Carrega MILHAR
STA R3 @291 # Mostra unidade no HEX3

LDA R3 @4 # Carrega DEZENA DE MILHAR
STA R3 @292 # Mostra unidade no HEX4

LDA R3 @5 # Carrega CENTENA DE MILHAR
STA R3 @293 # Mostra unidade no HEX5

RET